<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/octanews/infoin/ui/auth/LoginActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/octanews/infoin/ui/auth/LoginActivity.kt" />
              <option name="originalContent" value="package com.octanews.infoin.ui.auth&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Patterns&#10;import android.view.View&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.splashscreen.SplashScreen&#10;import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.GoogleAuthProvider&#10;import com.google.firebase.firestore.FirebaseFirestore // Import Firestore&#10;import com.octanews.infoin.MainActivity&#10;import com.octanews.infoin.R&#10;import com.octanews.infoin.databinding.ActivityLoginBinding&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;&#10;    private lateinit var binding: ActivityLoginBinding&#10;    private lateinit var auth: FirebaseAuth&#10;    private var isLoggingIn = false&#10;&#10;    // Variabel untuk Google Sign-In&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;    private val googleSignInLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(ApiException::class.java)!!&#10;                firebaseAuthWithGoogle(account.idToken!!)&#10;            } catch (e: ApiException) {&#10;                binding.progressBar.visibility = View.GONE // Sembunyikan progress bar jika gagal&#10;                Toast.makeText(this, &quot;Login Google Gagal: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        } else {&#10;            binding.progressBar.visibility = View.GONE // Sembunyikan progress bar jika pengguna batal&#10;        }&#10;    }&#10;&#10;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;&#10;        installSplashScreen()&#10;&#10;        super.onCreate(savedInstanceState)&#10;        binding = ActivityLoginBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        auth = FirebaseAuth.getInstance()&#10;&#10;        // Konfigurasi Google Sign-In&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        googleSignInClient = GoogleSignIn.getClient(this, gso)&#10;&#10;        // --- Atur semua listener ---&#10;        setupListeners()&#10;    }&#10;&#10;    override fun onStart() {&#10;        super.onStart()&#10;        // Jika user membuka aplikasi dan sudah login, kita cek profilnya&#10;        if (auth.currentUser != null) {&#10;            checkUserProfile()&#10;        }&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        binding.btnLogin.setOnClickListener { loginUser() }&#10;        binding.tvRegister.setOnClickListener {&#10;            startActivity(Intent(this, RegisterActivity::class.java))&#10;        }&#10;        binding.tvForgot.setOnClickListener { showResetPasswordDialog() }&#10;        binding.btnGoogle.setOnClickListener { signInWithGoogle() }&#10;        binding.btnFacebook.setOnClickListener {&#10;            Toast.makeText(this, &quot;Facebook Sign-In belum di-setup&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    // --- FUNGSI INTI BARU UNTUK NAVIGASI ---&#10;    private fun checkUserProfile() {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid == null) {&#10;            // Jika tidak ada user, sembunyikan loading dan jangan lakukan apa-apa&#10;            binding.progressBar.visibility = View.GONE&#10;            return&#10;        }&#10;&#10;        // Tampilkan loading saat pengecekan&#10;        binding.progressBar.visibility = View.VISIBLE&#10;&#10;        val db = FirebaseFirestore.getInstance()&#10;        val userRef = db.collection(&quot;users&quot;).document(uid)&#10;&#10;        userRef.get()&#10;            .addOnSuccessListener { document -&gt;&#10;                // Sembunyikan loading setelah dapat data&#10;                binding.progressBar.visibility = View.GONE&#10;&#10;                val intent: Intent&#10;                if (document != null &amp;&amp; document.exists()) {&#10;                    val isSetupComplete = document.getBoolean(&quot;isSetupComplete&quot;) ?: false&#10;                    intent = if (isSetupComplete) {&#10;                        // Jika setup selesai, ke MainActivity&#10;                        Intent(this, MainActivity::class.java)&#10;                    } else {&#10;                        // Jika belum selesai, ke alur personalisasi&#10;                        Intent(this, SelectCountryActivity::class.java)&#10;                    }&#10;                } else {&#10;                    // Jika dokumen tidak ada, anggap user baru (misal login via Google pertama kali)&#10;                    // Kita perlu membuat dokumennya di sini&#10;                    createInitialUserProfile {&#10;                        val setupIntent = Intent(this, SelectCountryActivity::class.java)&#10;                        setupIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;                        startActivity(setupIntent)&#10;                        finish()&#10;                    }&#10;                    return@addOnSuccessListener // Hentikan eksekusi di sini, tunggu createInitialUserProfile selesai&#10;                }&#10;&#10;                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;            .addOnFailureListener {&#10;                binding.progressBar.visibility = View.GONE&#10;                Toast.makeText(this, &quot;Gagal memuat profil, coba lagi&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;    }&#10;&#10;    // Fungsi baru untuk membuat profil jika belum ada (berguna untuk Google Sign-In pertama kali)&#10;    private fun createInitialUserProfile(onComplete: () -&gt; Unit) {&#10;        val firebaseUser = auth.currentUser ?: return&#10;        val uid = firebaseUser.uid&#10;        val email = firebaseUser.email&#10;        val name = firebaseUser.displayName ?: &quot;&quot;&#10;&#10;        val userMap = hashMapOf(&#10;            &quot;uid&quot; to uid, &quot;email&quot; to email, &quot;fullName&quot; to name, &quot;username&quot; to &quot;&quot;,&#10;            &quot;country&quot; to &quot;&quot;, &quot;isSetupComplete&quot; to false&#10;        )&#10;&#10;        val db = FirebaseFirestore.getInstance()&#10;        db.collection(&quot;users&quot;).document(uid).set(userMap)&#10;            .addOnSuccessListener { onComplete() } // Jalankan onComplete callback setelah sukses&#10;            .addOnFailureListener { e -&gt;&#10;                binding.progressBar.visibility = View.GONE&#10;                Toast.makeText(this, &quot;Gagal membuat profil: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;    }&#10;&#10;&#10;    private fun signInWithGoogle() {&#10;        binding.progressBar.visibility = View.VISIBLE&#10;        val signInIntent = googleSignInClient.signInIntent&#10;        googleSignInLauncher.launch(signInIntent)&#10;    }&#10;&#10;    private fun firebaseAuthWithGoogle(idToken: String) {&#10;        val credential = GoogleAuthProvider.getCredential(idToken, null)&#10;        auth.signInWithCredential(credential)&#10;            .addOnCompleteListener(this) { task -&gt;&#10;                if (task.isSuccessful) {&#10;                    // --- DIUBAH: Panggil checkUserProfile ---&#10;                    checkUserProfile()&#10;                } else {&#10;                    binding.progressBar.visibility = View.GONE&#10;                    Toast.makeText(this, task.exception?.localizedMessage ?: &quot;Login Firebase Gagal&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun loginUser() {&#10;        if (isLoggingIn) return&#10;        val email = binding.etEmail.text.toString().trim()&#10;        val password = binding.etPassword.text.toString()&#10;&#10;        if (!validateInput(email, password)) return&#10;&#10;        isLoggingIn = true&#10;        binding.progressBar.visibility = View.VISIBLE&#10;        binding.btnLogin.isEnabled = false&#10;&#10;        auth.signInWithEmailAndPassword(email, password)&#10;            .addOnCompleteListener { task -&gt;&#10;                isLoggingIn = false&#10;                binding.btnLogin.isEnabled = true&#10;                // Progress bar akan di-handle oleh checkUserProfile&#10;&#10;                if (task.isSuccessful) {&#10;                    // --- DIUBAH: Panggil checkUserProfile ---&#10;                    checkUserProfile()&#10;                } else {&#10;                    binding.progressBar.visibility = View.GONE&#10;                    Toast.makeText(this, task.exception?.localizedMessage ?: &quot;Login gagal&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }&#10;    }&#10;&#10;    // Fungsi validasi dipisah agar lebih rapi&#10;    private fun validateInput(email: String, pass: String): Boolean {&#10;        binding.tilEmail.error = null&#10;        binding.tilPassword.error = null&#10;        if (email.isEmpty()) {&#10;            binding.tilEmail.error = &quot;Email tidak boleh kosong&quot;&#10;            return false&#10;        }&#10;        if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            binding.tilEmail.error = &quot;Format email tidak valid&quot;&#10;            return false&#10;        }&#10;        if (pass.isEmpty()) {&#10;            binding.tilPassword.error = &quot;Password tidak boleh kosong&quot;&#10;            return false&#10;        }&#10;        return true&#10;    }&#10;&#10;    // (Fungsi showResetPasswordDialog tidak perlu diubah, biarkan seperti aslinya)&#10;    private fun showResetPasswordDialog() {&#10;        //... isi fungsi reset passwordmu ...&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.octanews.infoin.ui.auth&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Patterns&#10;import android.view.View&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.splashscreen.SplashScreen&#10;import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.GoogleAuthProvider&#10;import com.google.firebase.firestore.FirebaseFirestore // Import Firestore&#10;import com.octanews.infoin.MainActivity&#10;import com.octanews.infoin.R&#10;import com.octanews.infoin.databinding.ActivityLoginBinding&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;&#10;    private lateinit var binding: ActivityLoginBinding&#10;    private lateinit var auth: FirebaseAuth&#10;    private var isLoggingIn = false&#10;&#10;    // Variabel untuk Google Sign-In&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;    private val googleSignInLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(ApiException::class.java)!!&#10;                firebaseAuthWithGoogle(account.idToken!!)&#10;            } catch (e: ApiException) {&#10;                binding.progressBar.visibility = View.GONE // Sembunyikan progress bar jika gagal&#10;                Toast.makeText(this, &quot;Login Google Gagal: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        } else {&#10;            binding.progressBar.visibility = View.GONE // Sembunyikan progress bar jika pengguna batal&#10;        }&#10;    }&#10;&#10;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;&#10;        installSplashScreen()&#10;&#10;        super.onCreate(savedInstanceState)&#10;        auth = FirebaseAuth.getInstance()&#10;        // Jika user sudah login, langsung ke MainActivity&#10;        if (auth.currentUser != null) {&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;            startActivity(intent)&#10;            finish()&#10;            return&#10;        }&#10;        // Jika belum login, tampilkan form login&#10;        binding = ActivityLoginBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        // Konfigurasi Google Sign-In&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        googleSignInClient = GoogleSignIn.getClient(this, gso)&#10;&#10;        // --- Atur semua listener ---&#10;        setupListeners()&#10;    }&#10;&#10;    override fun onStart() {&#10;        super.onStart()&#10;        // Jika user membuka aplikasi dan sudah login, kita cek profilnya&#10;        if (auth.currentUser != null) {&#10;            checkUserProfile()&#10;        }&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        binding.btnLogin.setOnClickListener { loginUser() }&#10;        binding.tvRegister.setOnClickListener {&#10;            startActivity(Intent(this, RegisterActivity::class.java))&#10;        }&#10;        binding.tvForgot.setOnClickListener { showResetPasswordDialog() }&#10;        binding.btnGoogle.setOnClickListener { signInWithGoogle() }&#10;        binding.btnFacebook.setOnClickListener {&#10;            Toast.makeText(this, &quot;Facebook Sign-In belum di-setup&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    // --- FUNGSI INTI BARU UNTUK NAVIGASI ---&#10;    private fun checkUserProfile() {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid == null) {&#10;            // Jika tidak ada user, sembunyikan loading dan jangan lakukan apa-apa&#10;            binding.progressBar.visibility = View.GONE&#10;            return&#10;        }&#10;&#10;        // Tampilkan loading saat pengecekan&#10;        binding.progressBar.visibility = View.VISIBLE&#10;&#10;        val db = FirebaseFirestore.getInstance()&#10;        val userRef = db.collection(&quot;users&quot;).document(uid)&#10;&#10;        userRef.get()&#10;            .addOnSuccessListener { document -&gt;&#10;                // Sembunyikan loading setelah dapat data&#10;                binding.progressBar.visibility = View.GONE&#10;&#10;                val intent: Intent&#10;                if (document != null &amp;&amp; document.exists()) {&#10;                    val isSetupComplete = document.getBoolean(&quot;isSetupComplete&quot;) ?: false&#10;                    intent = if (isSetupComplete) {&#10;                        // Jika setup selesai, ke MainActivity&#10;                        Intent(this, MainActivity::class.java)&#10;                    } else {&#10;                        // Jika belum selesai, ke alur personalisasi&#10;                        Intent(this, SelectCountryActivity::class.java)&#10;                    }&#10;                } else {&#10;                    // Jika dokumen tidak ada, anggap user baru (misal login via Google pertama kali)&#10;                    // Kita perlu membuat dokumennya di sini&#10;                    createInitialUserProfile {&#10;                        val setupIntent = Intent(this, SelectCountryActivity::class.java)&#10;                        setupIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;                        startActivity(setupIntent)&#10;                        finish()&#10;                    }&#10;                    return@addOnSuccessListener // Hentikan eksekusi di sini, tunggu createInitialUserProfile selesai&#10;                }&#10;&#10;                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;            .addOnFailureListener {&#10;                binding.progressBar.visibility = View.GONE&#10;                Toast.makeText(this, &quot;Gagal memuat profil, coba lagi&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;    }&#10;&#10;    // Fungsi baru untuk membuat profil jika belum ada (berguna untuk Google Sign-In pertama kali)&#10;    private fun createInitialUserProfile(onComplete: () -&gt; Unit) {&#10;        val firebaseUser = auth.currentUser ?: return&#10;        val uid = firebaseUser.uid&#10;        val email = firebaseUser.email&#10;        val name = firebaseUser.displayName ?: &quot;&quot;&#10;&#10;        val userMap = hashMapOf(&#10;            &quot;uid&quot; to uid, &quot;email&quot; to email, &quot;fullName&quot; to name, &quot;username&quot; to &quot;&quot;,&#10;            &quot;country&quot; to &quot;&quot;, &quot;isSetupComplete&quot; to false&#10;        )&#10;&#10;        val db = FirebaseFirestore.getInstance()&#10;        db.collection(&quot;users&quot;).document(uid).set(userMap)&#10;            .addOnSuccessListener { onComplete() } // Jalankan onComplete callback setelah sukses&#10;            .addOnFailureListener { e -&gt;&#10;                binding.progressBar.visibility = View.GONE&#10;                Toast.makeText(this, &quot;Gagal membuat profil: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;    }&#10;&#10;&#10;    private fun signInWithGoogle() {&#10;        binding.progressBar.visibility = View.VISIBLE&#10;        val signInIntent = googleSignInClient.signInIntent&#10;        googleSignInLauncher.launch(signInIntent)&#10;    }&#10;&#10;    private fun firebaseAuthWithGoogle(idToken: String) {&#10;        val credential = GoogleAuthProvider.getCredential(idToken, null)&#10;        auth.signInWithCredential(credential)&#10;            .addOnCompleteListener(this) { task -&gt;&#10;                if (task.isSuccessful) {&#10;                    // --- DIUBAH: Panggil checkUserProfile ---&#10;                    checkUserProfile()&#10;                } else {&#10;                    binding.progressBar.visibility = View.GONE&#10;                    Toast.makeText(this, task.exception?.localizedMessage ?: &quot;Login Firebase Gagal&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun loginUser() {&#10;        if (isLoggingIn) return&#10;        val email = binding.etEmail.text.toString().trim()&#10;        val password = binding.etPassword.text.toString()&#10;&#10;        if (!validateInput(email, password)) return&#10;&#10;        isLoggingIn = true&#10;        binding.progressBar.visibility = View.VISIBLE&#10;        binding.btnLogin.isEnabled = false&#10;&#10;        auth.signInWithEmailAndPassword(email, password)&#10;            .addOnCompleteListener { task -&gt;&#10;                isLoggingIn = false&#10;                binding.btnLogin.isEnabled = true&#10;                // Progress bar akan di-handle oleh checkUserProfile&#10;&#10;                if (task.isSuccessful) {&#10;                    // --- DIUBAH: Panggil checkUserProfile ---&#10;                    checkUserProfile()&#10;                } else {&#10;                    binding.progressBar.visibility = View.GONE&#10;                    Toast.makeText(this, task.exception?.localizedMessage ?: &quot;Login gagal&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }&#10;    }&#10;&#10;    // Fungsi validasi dipisah agar lebih rapi&#10;    private fun validateInput(email: String, pass: String): Boolean {&#10;        binding.tilEmail.error = null&#10;        binding.tilPassword.error = null&#10;        if (email.isEmpty()) {&#10;            binding.tilEmail.error = &quot;Email tidak boleh kosong&quot;&#10;            return false&#10;        }&#10;        if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            binding.tilEmail.error = &quot;Format email tidak valid&quot;&#10;            return false&#10;        }&#10;        if (pass.isEmpty()) {&#10;            binding.tilPassword.error = &quot;Password tidak boleh kosong&quot;&#10;            return false&#10;        }&#10;        return true&#10;    }&#10;&#10;    // (Fungsi showResetPasswordDialog tidak perlu diubah, biarkan seperti aslinya)&#10;    private fun showResetPasswordDialog() {&#10;        //... isi fungsi reset passwordmu ...&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>