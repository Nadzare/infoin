<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/octanews/infoin/ui/auth/LoginActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/octanews/infoin/ui/auth/LoginActivity.kt" />
              <option name="originalContent" value="package com.octanews.infoin.ui.auth&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Patterns&#10;import android.view.View&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.splashscreen.SplashScreen&#10;import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.GoogleAuthProvider&#10;import com.google.firebase.firestore.FirebaseFirestore // Import Firestore&#10;import com.octanews.infoin.MainActivity&#10;import com.octanews.infoin.R&#10;import com.octanews.infoin.databinding.ActivityLoginBinding&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;&#10;    private lateinit var binding: ActivityLoginBinding&#10;    private lateinit var auth: FirebaseAuth&#10;    private var isLoggingIn = false&#10;&#10;    // Variabel untuk Google Sign-In&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;    private val googleSignInLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(ApiException::class.java)!!&#10;                firebaseAuthWithGoogle(account.idToken!!)&#10;            } catch (e: ApiException) {&#10;                binding.progressBar.visibility = View.GONE // Sembunyikan progress bar jika gagal&#10;                Toast.makeText(this, &quot;Login Google Gagal: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        } else {&#10;            binding.progressBar.visibility = View.GONE // Sembunyikan progress bar jika pengguna batal&#10;        }&#10;    }&#10;&#10;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;&#10;        installSplashScreen()&#10;&#10;        super.onCreate(savedInstanceState)&#10;        googleSignInClient = GoogleSignIn.getClient(this, gso)&#10;&#10;        // --- Atur semua listener ---&#10;        auth = FirebaseAuth.getInstance()&#10;        setupListeners()&#10;    }&#10;&#10;    override fun onStart() {&#10;        super.onStart()&#10;        // Jika user membuka aplikasi dan sudah login, kita cek profilnya&#10;        if (auth.currentUser != null) {&#10;            checkUserProfile()&#10;        }&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        binding.btnLogin.setOnClickListener { loginUser() }&#10;        binding.tvRegister.setOnClickListener {&#10;            startActivity(Intent(this, RegisterActivity::class.java))&#10;        }&#10;        binding.tvForgot.setOnClickListener { showResetPasswordDialog() }&#10;        binding.btnGoogle.setOnClickListener { signInWithGoogle() }&#10;    }&#10;&#10;    // --- FUNGSI INTI BARU UNTUK NAVIGASI ---&#10;    private fun checkUserProfile() {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid == null) {&#10;            // Jika tidak ada user, sembunyikan loading dan jangan lakukan apa-apa&#10;            binding.progressBar.visibility = View.GONE&#10;            return&#10;        }&#10;&#10;        // Tampilkan loading saat pengecekan&#10;        binding.progressBar.visibility = View.VISIBLE&#10;&#10;        val db = FirebaseFirestore.getInstance()&#10;        val userRef = db.collection(&quot;users&quot;).document(uid)&#10;&#10;        userRef.get()&#10;            .addOnSuccessListener { document -&gt;&#10;                // Sembunyikan loading setelah dapat data&#10;                binding.progressBar.visibility = View.GONE&#10;&#10;                val intent: Intent&#10;                if (document != null &amp;&amp; document.exists()) {&#10;                    val isSetupComplete = document.getBoolean(&quot;isSetupComplete&quot;) ?: false&#10;                    intent = if (isSetupComplete) {&#10;                        // Jika setup selesai, ke MainActivity&#10;                        Intent(this, MainActivity::class.java)&#10;                    } else {&#10;                        // Jika belum selesai, ke alur personalisasi&#10;                        Intent(this, SelectCountryActivity::class.java)&#10;                    }&#10;                } else {&#10;                    // Jika dokumen tidak ada, anggap user baru (misal login via Google pertama kali)&#10;                    // Kita perlu membuat dokumennya di sini&#10;                    createInitialUserProfile {&#10;                        val setupIntent = Intent(this, SelectCountryActivity::class.java)&#10;                        setupIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;                        startActivity(setupIntent)&#10;                        finish()&#10;                    }&#10;                    return@addOnSuccessListener // Hentikan eksekusi di sini, tunggu createInitialUserProfile selesai&#10;                }&#10;&#10;                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;            .addOnFailureListener {&#10;                binding.progressBar.visibility = View.GONE&#10;                Toast.makeText(this, &quot;Gagal memuat profil, coba lagi&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;    }&#10;&#10;    // Fungsi baru untuk membuat profil jika belum ada (berguna untuk Google Sign-In pertama kali)&#10;    private fun createInitialUserProfile(onComplete: () -&gt; Unit) {&#10;        val firebaseUser = auth.currentUser ?: return&#10;        val uid = firebaseUser.uid&#10;        val email = firebaseUser.email&#10;        val name = firebaseUser.displayName ?: &quot;&quot;&#10;&#10;        val userMap = hashMapOf(&#10;            &quot;uid&quot; to uid, &quot;email&quot; to email, &quot;fullName&quot; to name, &quot;username&quot; to &quot;&quot;,&#10;            &quot;country&quot; to &quot;&quot;, &quot;isSetupComplete&quot; to false&#10;        )&#10;&#10;        val db = FirebaseFirestore.getInstance()&#10;        db.collection(&quot;users&quot;).document(uid).set(userMap)&#10;            .addOnSuccessListener { onComplete() } // Jalankan onComplete callback setelah sukses&#10;            .addOnFailureListener { e -&gt;&#10;                binding.progressBar.visibility = View.GONE&#10;                Toast.makeText(this, &quot;Gagal membuat profil: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;    }&#10;&#10;&#10;    private fun signInWithGoogle() {&#10;        binding.progressBar.visibility = View.VISIBLE&#10;        val signInIntent = googleSignInClient.signInIntent&#10;        googleSignInLauncher.launch(signInIntent)&#10;    }&#10;&#10;    private fun firebaseAuthWithGoogle(idToken: String) {&#10;        val credential = GoogleAuthProvider.getCredential(idToken, null)&#10;        auth.signInWithCredential(credential)&#10;            .addOnCompleteListener(this) { task -&gt;&#10;                if (task.isSuccessful) {&#10;                    // --- DIUBAH: Panggil checkUserProfile ---&#10;                    checkUserProfile()&#10;                } else {&#10;                    binding.progressBar.visibility = View.GONE&#10;                    Toast.makeText(this, task.exception?.localizedMessage ?: &quot;Login Firebase Gagal&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun loginUser() {&#10;        if (isLoggingIn) return&#10;        val email = binding.etEmail.text.toString().trim()&#10;        val password = binding.etPassword.text.toString()&#10;&#10;        if (!validateInput(email, password)) return&#10;&#10;        isLoggingIn = true&#10;        binding.progressBar.visibility = View.VISIBLE&#10;        binding.btnLogin.isEnabled = false&#10;&#10;        auth.signInWithEmailAndPassword(email, password)&#10;            .addOnCompleteListener { task -&gt;&#10;                isLoggingIn = false&#10;                binding.btnLogin.isEnabled = true&#10;                // Progress bar akan di-handle oleh checkUserProfile&#10;&#10;                if (task.isSuccessful) {&#10;                    // --- DIUBAH: Panggil checkUserProfile ---&#10;                    checkUserProfile()&#10;                } else {&#10;                    binding.progressBar.visibility = View.GONE&#10;                    Toast.makeText(this, task.exception?.localizedMessage ?: &quot;Login gagal&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }&#10;    }&#10;&#10;    // Fungsi validasi dipisah agar lebih rapi&#10;    private fun validateInput(email: String, pass: String): Boolean {&#10;        binding.tilEmail.error = null&#10;        binding.tilPassword.error = null&#10;        if (email.isEmpty()) {&#10;            binding.tilEmail.error = &quot;Email tidak boleh kosong&quot;&#10;            return false&#10;        }&#10;        if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            binding.tilEmail.error = &quot;Format email tidak valid&quot;&#10;            return false&#10;        }&#10;        if (pass.isEmpty()) {&#10;            binding.tilPassword.error = &quot;Password tidak boleh kosong&quot;&#10;            return false&#10;        }&#10;        return true&#10;    }&#10;&#10;    // (Fungsi showResetPasswordDialog tidak perlu diubah, biarkan seperti aslinya)&#10;    private fun showResetPasswordDialog() {&#10;        //... isi fungsi reset passwordmu ...&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.octanews.infoin.ui.auth&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Patterns&#10;import android.view.View&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.splashscreen.SplashScreen&#10;import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.GoogleAuthProvider&#10;import com.google.firebase.firestore.FirebaseFirestore // Import Firestore&#10;import com.octanews.infoin.MainActivity&#10;import com.octanews.infoin.R&#10;import com.octanews.infoin.databinding.ActivityLoginBinding&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;&#10;    private lateinit var binding: ActivityLoginBinding&#10;    private lateinit var auth: FirebaseAuth&#10;    private var isLoggingIn = false&#10;&#10;    // Variabel untuk Google Sign-In&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;    private val googleSignInLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)&#10;            try {&#10;                val account = task.getResult(ApiException::class.java)!!&#10;                firebaseAuthWithGoogle(account.idToken!!)&#10;            } catch (e: ApiException) {&#10;                binding.progressBar.visibility = View.GONE // Sembunyikan progress bar jika gagal&#10;                Toast.makeText(this, &quot;Login Google Gagal: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        } else {&#10;            binding.progressBar.visibility = View.GONE // Sembunyikan progress bar jika pengguna batal&#10;        }&#10;    }&#10;&#10;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;&#10;        installSplashScreen()&#10;&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Inisialisasi binding&#10;        binding = ActivityLoginBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        // Inisialisasi GoogleSignInOptions sebelum digunakan&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;&#10;        googleSignInClient = GoogleSignIn.getClient(this, gso)&#10;&#10;        // --- Atur semua listener ---&#10;        auth = FirebaseAuth.getInstance()&#10;        setupListeners()&#10;    }&#10;&#10;    override fun onStart() {&#10;        super.onStart()&#10;        // Jika user membuka aplikasi dan sudah login, kita cek profilnya&#10;        if (auth.currentUser != null) {&#10;            checkUserProfile()&#10;        }&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        binding.btnLogin.setOnClickListener { loginUser() }&#10;        binding.tvRegister.setOnClickListener {&#10;            startActivity(Intent(this, RegisterActivity::class.java))&#10;        }&#10;        binding.tvForgot.setOnClickListener { showResetPasswordDialog() }&#10;        binding.btnGoogle.setOnClickListener { signInWithGoogle() }&#10;    }&#10;&#10;    // --- FUNGSI INTI BARU UNTUK NAVIGASI ---&#10;    private fun checkUserProfile() {&#10;        val uid = auth.currentUser?.uid&#10;        if (uid == null) {&#10;            // Jika tidak ada user, sembunyikan loading dan jangan lakukan apa-apa&#10;            binding.progressBar.visibility = View.GONE&#10;            return&#10;        }&#10;&#10;        // Tampilkan loading saat pengecekan&#10;        binding.progressBar.visibility = View.VISIBLE&#10;&#10;        val db = FirebaseFirestore.getInstance()&#10;        val userRef = db.collection(&quot;users&quot;).document(uid)&#10;&#10;        userRef.get()&#10;            .addOnSuccessListener { document -&gt;&#10;                // Sembunyikan loading setelah dapat data&#10;                binding.progressBar.visibility = View.GONE&#10;&#10;                val intent: Intent&#10;                if (document != null &amp;&amp; document.exists()) {&#10;                    val isSetupComplete = document.getBoolean(&quot;isSetupComplete&quot;) ?: false&#10;                    intent = if (isSetupComplete) {&#10;                        // Jika setup selesai, ke MainActivity&#10;                        Intent(this, MainActivity::class.java)&#10;                    } else {&#10;                        // Jika belum selesai, ke alur personalisasi&#10;                        Intent(this, SelectCountryActivity::class.java)&#10;                    }&#10;                } else {&#10;                    // Jika dokumen tidak ada, anggap user baru (misal login via Google pertama kali)&#10;                    // Kita perlu membuat dokumennya di sini&#10;                    createInitialUserProfile {&#10;                        val setupIntent = Intent(this, SelectCountryActivity::class.java)&#10;                        setupIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;                        startActivity(setupIntent)&#10;                        finish()&#10;                    }&#10;                    return@addOnSuccessListener // Hentikan eksekusi di sini, tunggu createInitialUserProfile selesai&#10;                }&#10;&#10;                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;            .addOnFailureListener {&#10;                binding.progressBar.visibility = View.GONE&#10;                Toast.makeText(this, &quot;Gagal memuat profil, coba lagi&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;    }&#10;&#10;    // Fungsi baru untuk membuat profil jika belum ada (berguna untuk Google Sign-In pertama kali)&#10;    private fun createInitialUserProfile(onComplete: () -&gt; Unit) {&#10;        val firebaseUser = auth.currentUser ?: return&#10;        val uid = firebaseUser.uid&#10;        val email = firebaseUser.email&#10;        val name = firebaseUser.displayName ?: &quot;&quot;&#10;&#10;        val userMap = hashMapOf(&#10;            &quot;uid&quot; to uid, &quot;email&quot; to email, &quot;fullName&quot; to name, &quot;username&quot; to &quot;&quot;,&#10;            &quot;country&quot; to &quot;&quot;, &quot;isSetupComplete&quot; to false&#10;        )&#10;&#10;        val db = FirebaseFirestore.getInstance()&#10;        db.collection(&quot;users&quot;).document(uid).set(userMap)&#10;            .addOnSuccessListener { onComplete() } // Jalankan onComplete callback setelah sukses&#10;            .addOnFailureListener { e -&gt;&#10;                binding.progressBar.visibility = View.GONE&#10;                Toast.makeText(this, &quot;Gagal membuat profil: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;    }&#10;&#10;&#10;    private fun signInWithGoogle() {&#10;        binding.progressBar.visibility = View.VISIBLE&#10;        val signInIntent = googleSignInClient.signInIntent&#10;        googleSignInLauncher.launch(signInIntent)&#10;    }&#10;&#10;    private fun firebaseAuthWithGoogle(idToken: String) {&#10;        val credential = GoogleAuthProvider.getCredential(idToken, null)&#10;        auth.signInWithCredential(credential)&#10;            .addOnCompleteListener(this) { task -&gt;&#10;                if (task.isSuccessful) {&#10;                    // --- DIUBAH: Panggil checkUserProfile ---&#10;                    checkUserProfile()&#10;                } else {&#10;                    binding.progressBar.visibility = View.GONE&#10;                    Toast.makeText(this, task.exception?.localizedMessage ?: &quot;Login Firebase Gagal&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun loginUser() {&#10;        if (isLoggingIn) return&#10;        val email = binding.etEmail.text.toString().trim()&#10;        val password = binding.etPassword.text.toString()&#10;&#10;        if (!validateInput(email, password)) return&#10;&#10;        isLoggingIn = true&#10;        binding.progressBar.visibility = View.VISIBLE&#10;        binding.btnLogin.isEnabled = false&#10;&#10;        auth.signInWithEmailAndPassword(email, password)&#10;            .addOnCompleteListener { task -&gt;&#10;                isLoggingIn = false&#10;                binding.btnLogin.isEnabled = true&#10;                // Progress bar akan di-handle oleh checkUserProfile&#10;&#10;                if (task.isSuccessful) {&#10;                    // --- DIUBAH: Panggil checkUserProfile ---&#10;                    checkUserProfile()&#10;                } else {&#10;                    binding.progressBar.visibility = View.GONE&#10;                    Toast.makeText(this, task.exception?.localizedMessage ?: &quot;Login gagal&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }&#10;    }&#10;&#10;    // Fungsi validasi dipisah agar lebih rapi&#10;    private fun validateInput(email: String, pass: String): Boolean {&#10;        binding.tilEmail.error = null&#10;        binding.tilPassword.error = null&#10;        if (email.isEmpty()) {&#10;            binding.tilEmail.error = &quot;Email tidak boleh kosong&quot;&#10;            return false&#10;        }&#10;        if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            binding.tilEmail.error = &quot;Format email tidak valid&quot;&#10;            return false&#10;        }&#10;        if (pass.isEmpty()) {&#10;            binding.tilPassword.error = &quot;Password tidak boleh kosong&quot;&#10;            return false&#10;        }&#10;        return true&#10;    }&#10;&#10;    // (Fungsi showResetPasswordDialog tidak perlu diubah, biarkan seperti aslinya)&#10;    private fun showResetPasswordDialog() {&#10;        //... isi fungsi reset passwordmu ...&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/octanews/infoin/ui/main/ProfileFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/octanews/infoin/ui/main/ProfileFragment.kt" />
              <option name="originalContent" value="package com.octanews.infoin.ui.main&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.*&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.fragment.app.Fragment&#10;import com.bumptech.glide.Glide&#10;import com.google.android.material.tabs.TabLayoutMediator&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.octanews.infoin.R&#10;import com.octanews.infoin.databinding.FragmentProfileBinding&#10;import com.octanews.infoin.ui.adapter.ProfileTabsAdapter&#10;import com.octanews.infoin.ui.auth.EditProfileActivity&#10;import com.octanews.infoin.ui.auth.SettingsActivity&#10;&#10;class ProfileFragment : Fragment() {&#10;&#10;    private var _binding: FragmentProfileBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val auth by lazy { FirebaseAuth.getInstance() }&#10;    private val db by lazy { FirebaseFirestore.getInstance() }&#10;&#10;    // --- PERUBAHAN 1: Tambahkan ActivityResultLauncher ---&#10;    private val editProfileLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            // Jika hasil dari EditProfileActivity adalah OK, muat ulang data profil&#10;            loadUserProfile()&#10;            Toast.makeText(context, &quot;Profil berhasil di-update&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {&#10;        _binding = FragmentProfileBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        (activity as? AppCompatActivity)?.setSupportActionBar(binding.toolbar)&#10;        setHasOptionsMenu(true)&#10;&#10;        setupViewPagerAndTabs()&#10;        loadUserProfile()&#10;&#10;        // --- PERUBAHAN 2: Ganti OnClickListener ---&#10;        binding.btnEditProfile.setOnClickListener {&#10;            val intent = Intent(activity, EditProfileActivity::class.java)&#10;            editProfileLauncher.launch(intent) // Gunakan launcher, bukan startActivity&#10;        }&#10;&#10;        binding.btnSettings.setOnClickListener {&#10;            startActivity(Intent(activity, SettingsActivity::class.java))&#10;        }&#10;    }&#10;&#10;    private fun setupViewPagerAndTabs() {&#10;        val adapter = ProfileTabsAdapter(this)&#10;        binding.viewPagerProfile.adapter = adapter&#10;&#10;        TabLayoutMediator(binding.tabLayoutProfile, binding.viewPagerProfile) { tab, position -&gt;&#10;            when (position) {&#10;                0 -&gt; tab.text = &quot;News&quot;&#10;                1 -&gt; tab.text = &quot;Recent&quot;&#10;            }&#10;        }.attach()&#10;    }&#10;&#10;    private fun loadUserProfile() {&#10;        val uid = auth.currentUser?.uid ?: return&#10;&#10;        db.collection(&quot;users&quot;).document(uid).get()&#10;            .addOnSuccessListener { document -&gt;&#10;                if (document != null &amp;&amp; document.exists()) {&#10;                    val fullName = document.getString(&quot;fullName&quot;)&#10;                    val bio = document.getString(&quot;bio&quot;)&#10;                    val profileImageUrl = document.getString(&quot;profileImageUrl&quot;)&#10;                    val username = document.getString(&quot;username&quot;)&#10;                    val website = document.getString(&quot;website&quot;)&#10;&#10;                    // Set toolbar title konsisten 'Profil'&#10;                    (activity as? AppCompatActivity)?.supportActionBar?.title = getString(R.string.profile)&#10;&#10;                    binding.tvFullName.text = fullName&#10;                    binding.tvUsername.text = if (!username.isNullOrEmpty()) &quot;@$username&quot; else &quot;&quot;&#10;                    binding.tvBio.text = bio ?: &quot;No bio yet. Tap edit to add one.&quot;&#10;&#10;                    Glide.with(this)&#10;                        .load(profileImageUrl)&#10;                        .placeholder(R.drawable.ic_profile_placeholder)&#10;                        .error(R.drawable.ic_profile_placeholder)&#10;                        .circleCrop()&#10;                        .into(binding.ivProfile)&#10;&#10;                    // Website button logic&#10;                    if (!website.isNullOrEmpty()) {&#10;                        binding.btnWebsite.isEnabled = true&#10;                        binding.btnWebsite.alpha = 1.0f&#10;                        binding.btnWebsite.setOnClickListener {&#10;                            val intent = Intent(Intent.ACTION_VIEW)&#10;                            intent.data = android.net.Uri.parse(if (website.startsWith(&quot;http&quot;)) website else &quot;https://$website&quot;)&#10;                            startActivity(intent)&#10;                        }&#10;                    } else {&#10;                        binding.btnWebsite.isEnabled = false&#10;                        binding.btnWebsite.alpha = 0.5f&#10;                        binding.btnWebsite.setOnClickListener(null)&#10;                    }&#10;                }&#10;            }&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {&#10;        inflater.inflate(R.menu.profile_menu, menu)&#10;        super.onCreateOptionsMenu(menu, inflater)&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            R.id.action_settings -&gt; {&#10;                startActivity(Intent(activity, SettingsActivity::class.java))&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.octanews.infoin.ui.main&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.*&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.fragment.app.Fragment&#10;import com.bumptech.glide.Glide&#10;import com.google.android.material.tabs.TabLayoutMediator&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.octanews.infoin.R&#10;import com.octanews.infoin.databinding.FragmentProfileBinding&#10;import com.octanews.infoin.ui.adapter.ProfileTabsAdapter&#10;import com.octanews.infoin.ui.auth.EditProfileActivity&#10;import com.octanews.infoin.ui.auth.SettingsActivity&#10;&#10;class ProfileFragment : Fragment() {&#10;&#10;    private var _binding: FragmentProfileBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val auth by lazy { FirebaseAuth.getInstance() }&#10;    private val db by lazy { FirebaseFirestore.getInstance() }&#10;&#10;    // --- PERUBAHAN 1: Tambahkan ActivityResultLauncher ---&#10;    private val editProfileLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            // Jika hasil dari EditProfileActivity adalah OK, muat ulang data profil&#10;            loadUserProfile()&#10;            Toast.makeText(context, &quot;Profil berhasil di-update&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {&#10;        _binding = FragmentProfileBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        // Workaround: gunakan findViewById jika binding.toolbar belum tersedia&#10;        val toolbar = view.findViewById&lt;androidx.appcompat.widget.Toolbar&gt;(R.id.toolbar)&#10;        (activity as? AppCompatActivity)?.setSupportActionBar(toolbar)&#10;        setHasOptionsMenu(true)&#10;&#10;        setupViewPagerAndTabs()&#10;        loadUserProfile()&#10;&#10;        binding.btnEditProfile.setOnClickListener {&#10;            val intent = Intent(activity, EditProfileActivity::class.java)&#10;            editProfileLauncher.launch(intent)&#10;        }&#10;&#10;        binding.btnSettings.setOnClickListener {&#10;            startActivity(Intent(activity, SettingsActivity::class.java))&#10;        }&#10;    }&#10;&#10;    private fun setupViewPagerAndTabs() {&#10;        val adapter = ProfileTabsAdapter(this)&#10;        binding.viewPagerProfile.adapter = adapter&#10;&#10;        TabLayoutMediator(binding.tabLayoutProfile, binding.viewPagerProfile) { tab, position -&gt;&#10;            when (position) {&#10;                0 -&gt; tab.text = &quot;News&quot;&#10;                1 -&gt; tab.text = &quot;Recent&quot;&#10;            }&#10;        }.attach()&#10;    }&#10;&#10;    private fun loadUserProfile() {&#10;        val uid = auth.currentUser?.uid ?: return&#10;&#10;        db.collection(&quot;users&quot;).document(uid).get()&#10;            .addOnSuccessListener { document -&gt;&#10;                if (document != null &amp;&amp; document.exists()) {&#10;                    val fullName = document.getString(&quot;fullName&quot;)&#10;                    val bio = document.getString(&quot;bio&quot;)&#10;                    val profileImageUrl = document.getString(&quot;profileImageUrl&quot;)&#10;                    val username = document.getString(&quot;username&quot;)&#10;                    val website = document.getString(&quot;website&quot;)&#10;&#10;                    // Set toolbar title konsisten 'Profil'&#10;                    (activity as? AppCompatActivity)?.supportActionBar?.title = getString(R.string.profile)&#10;&#10;                    binding.tvFullName.text = fullName&#10;                    binding.tvUsername.text = if (!username.isNullOrEmpty()) &quot;@$username&quot; else &quot;&quot;&#10;                    binding.tvBio.text = bio ?: &quot;No bio yet. Tap edit to add one.&quot;&#10;&#10;                    Glide.with(this)&#10;                        .load(profileImageUrl)&#10;                        .placeholder(R.drawable.ic_profile_placeholder)&#10;                        .error(R.drawable.ic_profile_placeholder)&#10;                        .circleCrop()&#10;                        .into(binding.ivProfile)&#10;&#10;                    // Website button logic&#10;                    if (!website.isNullOrEmpty()) {&#10;                        binding.btnWebsite.isEnabled = true&#10;                        binding.btnWebsite.alpha = 1.0f&#10;                        binding.btnWebsite.setOnClickListener {&#10;                            val intent = Intent(Intent.ACTION_VIEW)&#10;                            intent.data = android.net.Uri.parse(if (website.startsWith(&quot;http&quot;)) website else &quot;https://$website&quot;)&#10;                            startActivity(intent)&#10;                        }&#10;                    } else {&#10;                        binding.btnWebsite.isEnabled = false&#10;                        binding.btnWebsite.alpha = 0.5f&#10;                        binding.btnWebsite.setOnClickListener(null)&#10;                    }&#10;                }&#10;            }&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {&#10;        inflater.inflate(R.menu.profile_menu, menu)&#10;        super.onCreateOptionsMenu(menu, inflater)&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            R.id.action_settings -&gt; {&#10;                startActivity(Intent(activity, SettingsActivity::class.java))&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>